import cv2
import pandas as pd
from pathlib import Path
import os
import datetime

# --- CONFIGURA√á√ÉO ---
# O diret√≥rio que voc√™ forneceu.
# ATEN√á√ÉO: Verifique se este caminho est√° correto no seu sistema.
VIDEOS_DIRECTORY = Path("/home/guardai/antunes/IMAGENET/all_videos/")

# Lista de extens√µes de v√≠deo a serem consideradas. Voc√™ pode adicionar outras se necess√°rio.
VIDEO_EXTENSIONS = {'.mp4', '.avi', '.mov', '.mkv', '.flv', '.webm'}
# --------------------

def format_bytes(byte_size):
    """Converte um tamanho em bytes para um formato leg√≠vel (KB, MB, GB)."""
    if byte_size is None:
        return "N/A"
    power = 1024
    n = 0
    power_labels = {0: '', 1: 'KB', 2: 'MB', 3: 'GB', 4: 'TB'}
    while byte_size > power and n < len(power_labels) -1 :
        byte_size /= power
        n += 1
    return f"{byte_size:.2f} {power_labels[n]}"

def get_video_properties(video_path: Path):
    """
    Extrai as propriedades de um √∫nico arquivo de v√≠deo.
    Retorna um dicion√°rio com as caracter√≠sticas ou None se ocorrer um erro.
    """
    try:
        # Pega o tamanho do arquivo em bytes
        file_size = video_path.stat().st_size

        # Abre o v√≠deo com o OpenCV
        cap = cv2.VideoCapture(str(video_path))
        
        if not cap.isOpened():
            print(f"Aviso: N√£o foi poss√≠vel abrir o v√≠deo: {video_path.name}")
            return None

        # Extrai as propriedades
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = cap.get(cv2.CAP_PROP_FPS)
        frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

        # Calcula a dura√ß√£o. Adiciona uma verifica√ß√£o para evitar divis√£o por zero.
        duration_seconds = 0
        if fps and fps > 0:
            duration_seconds = frame_count / fps
        
        # Libera o objeto de v√≠deo
        cap.release()

        return {
            "Arquivo": video_path.name,
            "Tamanho": file_size,
            "Resolucao": f"{width}x{height}",
            "Duracao_Seg": duration_seconds
        }

    except Exception as e:
        print(f"Erro ao processar o arquivo {video_path.name}: {e}")
        return None

def main():
    """
    Fun√ß√£o principal que varre o diret√≥rio, analisa os v√≠deos e exibe os resultados.
    """
    print(f"üîé Analisando v√≠deos no diret√≥rio: {VIDEOS_DIRECTORY}")

    if not VIDEOS_DIRECTORY.is_dir():
        print(f"‚ùå Erro: O diret√≥rio especificado n√£o existe ou n√£o √© um diret√≥rio.")
        return

    all_videos_data = []
    
    # Percorre todos os arquivos no diret√≥rio de forma recursiva (inclui subpastas)
    # Use .glob('*') se quiser apenas os arquivos no diret√≥rio principal
    for file_path in VIDEOS_DIRECTORY.rglob('*'):
        # Verifica se √© um arquivo e se a extens√£o √© de v√≠deo
        if file_path.is_file() and file_path.suffix.lower() in VIDEO_EXTENSIONS:
            properties = get_video_properties(file_path)
            if properties:
                all_videos_data.append(properties)
    
    if not all_videos_data:
        print("‚úÖ Nenhum arquivo de v√≠deo encontrado no diret√≥rio.")
        return

    # Converte a lista de dicion√°rios em um DataFrame do Pandas
    df = pd.DataFrame(all_videos_data)
    
    # Formata as colunas para melhor visualiza√ß√£o
    df['Tamanho'] = df['Tamanho'].apply(format_bytes)
    df['Duracao'] = df['Duracao_Seg'].apply(lambda s: str(datetime.timedelta(seconds=round(s))))
    
    # Reordena e remove a coluna de segundos original
    df = df[['Arquivo', 'Tamanho', 'Resolucao', 'Duracao']]
    
    print("\n--- üìä Caracter√≠sticas dos V√≠deos ---")
    print(df.to_string())
    print("------------------------------------")

    # Verifica se todas as resolu√ß√µes s√£o iguais
    unique_resolutions = df['Resolucao'].unique()
    
    print("\n--- üé¨ An√°lise da Resolu√ß√£o ---")
    if len(unique_resolutions) == 1:
        print(f"‚úÖ Sim, todos os {len(df)} v√≠deos t√™m a mesma resolu√ß√£o: {unique_resolutions[0]}")
    else:
        print(f"‚ö†Ô∏è N√£o, os v√≠deos possuem resolu√ß√µes diferentes.")
        print("Resolu√ß√µes encontradas:")
        for res in unique_resolutions:
            count = df[df['Resolucao'] == res].shape[0]
            print(f"  - {res} ({count} v√≠deo(s))")
    print("------------------------------")


if __name__ == "__main__":
    main()
